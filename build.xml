<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. --><project basedir="." default="build" name="LangTest">
    <property environment="env"/>
    <property name="ECLIPSE_HOME" value="../../../eclipse_juno"/>
    <property name="imagewriter.location" value="imagewriter"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.6"/>
    <property name="source" value="1.6"/>

    <!-- Arguments to gwtc and devmode targets -->
    <property name="gwt.args" value="" />
    <property name="gwt.lib" value="gwt/lib"/>
    <property name="tomcat.deploy" value="../../../apache-tomcat-7.0.25/webapps"/>

    <path id="GWT SDK [GWT - 2.5.0].libraryclasspath">
        <pathelement location="gwt/gwt-user.jar"/>
        <pathelement location="gwt/gwt-dev.jar"/>
        <pathelement location="gwt/validation-api-1.0.0.GA-sources.jar"/>
        <pathelement location="gwt/validation-api-1.0.0.GA.jar"/>
    </path>
    <path id="imagewriter.classpath">
        <pathelement location="${imagewriter.location}/bin"/>
        <pathelement location="${imagewriter.location}/audioimage/lib/jtransforms-2.3.jar"/>
    </path>
    <path id="LangTest.classpath">
        <pathelement location="war/WEB-INF/classes"/>
        <pathelement location="test-classes"/>
        <path refid="GWT SDK [GWT - 2.5.0].libraryclasspath"/>
        <pathelement location="war/WEB-INF/lib/json-lib-2.4-jdk15.jar"/>
        <pathelement location="war/WEB-INF/lib/commons-codec-1.6.jar"/>
        <pathelement location="war/WEB-INF/lib/guava-13.0.jar"/>
        <pathelement location="war/WEB-INF/lib/gchart.jar"/>
        <pathelement location="war/WEB-INF/lib/log4j-1.2.17.jar"/>
        <path refid="imagewriter.classpath"/>
        <pathelement location="war/WEB-INF/lib/pronz.jar"/>
        <pathelement location="war/WEB-INF/lib/mira.jar"/>
        <pathelement location="war/WEB-INF/lib/javamelody-1.42.0.jar"/>
        <pathelement location="war/WEB-INF/lib/jrobin-1.5.9.jar"/>
        <pathelement location="war/WEB-INF/lib/gwt-visualization.jar"/>
        <pathelement location="war/WEB-INF/lib/poi-3.9-20121203.jar"/>
        <pathelement location="war/WEB-INF/lib/poi-ooxml-3.9-20121203.jar"/>
        <pathelement location="war/WEB-INF/lib/poi-ooxml-schemas-3.9-20121203.jar"/>
        <pathelement location="war/WEB-INF/lib/stax-api-1.0.1.jar"/>
        <pathelement location="war/WEB-INF/lib/xmlbeans-2.3.0.jar"/>
        <pathelement location="war/WEB-INF/lib/dom4j-1.6.1.jar"/>
    </path>
    <target name="init" depends="clean">
        <mkdir dir="war/WEB-INF/classes"/>
        <mkdir dir="test-classes"/>
        <copy includeemptydirs="false" todir="war/WEB-INF/classes">
            <fileset dir="src">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete dir="war/WEB-INF/classes"/>
        <delete dir="test-classes"/>
        <delete file="war/WEB-INF/lib/imagewriter.jar"/>
    </target>
    <target depends="clean" name="cleanall">
        <ant antfile="build.xml" dir="${imagewriter.location}" inheritAll="false" target="cleanall"/>
    </target>
    <target depends="build-subprojects,gwtc" name="build"/>

    <target depends="build" name="war">
        <jar destfile="netPron2.war" basedir="war" excludes="answers/**,audioimages/**,scoring/tmp/**" >      
    	</jar>
    </target>

    <target depends="build" name="warArabic">
        <jar destfile="npArabicText.war" basedir="war" excludes="answers/**,audioimages/**,scoring/**,fastAndSlowRef/**" >
        </jar>
    </target>

    <target depends="build" name="warLevantine">
        <jar destfile="netPron2.war" basedir="war" excludes="answers/**,audioimages/**,scoring/tmp/**,config/first/**,config/autocrt/**,config/dari/**,config/pilot/**,config/msa/**,config/pashto/**,config/urdu/**,scoring/models.dli-dari/**,scoring/models.wsj01-16/**,scoring/models.dli-ara/**,scoring/models.dli-ara.old/**" >
        </jar>
    </target>

    <target depends="build" name="warDari">
        <jar destfile="netPron2.war" basedir="war" excludes="answers/**,audioimages/**,scoring/tmp/**,config/first/**,config/levantine/**,config/pilot/**,scoring/models.dli-levantine/**,scoring/models.wsj01-16/**,scoring/models.dli-ara/**">
        </jar>
    </target>

    <!-- Makes data collection target -->
    <target depends="build" name="warUrdu">
        <jar destfile="npUrduData.war" basedir="war" excludes="WEB-INF/lib/pronz.jar,answers/**,audioimages/**,scoring/**,config/first/**,config/autoCRT/**,config/msa/**,config/msa/**,config/levantine/**,config/pilot/**,config/dari/**,scoring/models.dli-levantine/**,scoring/models.wsj01-16/**,,scoring/models.dli-dari/**,scoring/models.dli-ara/**">
        </jar>
    </target>

    <target depends="build" name="warArabicVLL">
        <jar destfile="npArabicVLL2.war" basedir="war" excludes="WEB-INF/lib/pronz.jar,answers/**,audioimages/**,scoring/**,config/first/**,config/urdu/**,config/autoCRT/**,config/msa/**,config/msa/**,config/levantine/**,config/eqyptian/**,config/dari/**,scoring/models.dli-levantine/**,scoring/models.wsj01-16/**,,scoring/models.dli-dari/**,scoring/models.dli-ara/**">
        </jar>
    </target>

    <target depends="build" name="warArabicVLL2">
        <jar destfile="npArabicVLL.war" basedir="war"
             includes="favicon.ico,images/**,js/**,langtest/**,LangTest.css,LangTest.html,swf/**,WEB-INF/**,config/pilot/**,soundmanager2.js"
             excludes="WEB=INF/lib/pronz.jar">
        </jar>
    </target>

    <!-- Makes a jar of just the .class files and the javascript, so you can overlay it on an active webapp -->
    <target depends="build" name="patch">
        <jar destfile="npPatch.war" basedir="war" excludes="WEB-INF/lib/pronz.jar,config/**,config/*/vlr-parle.*,answers/**,audioimages/**,scoring/**,config/first/**,config/autocrt/**,config/msa/**,config/msa/**,config/levantine/**,config/pilot/**,config/dari/**,config/pashto/**,scoring/models.dli-levantine/**,scoring/models.wsj01-16/**,,scoring/models.dli-dari/**,scoring/models.dli-ara/**">
        </jar>
    </target>

    <target depends="build" name="warAutocrt">
        <jar destfile="npAutocrt.war" basedir="war" excludes="answers/**,audioimages/**,scoring/tmp/**,config/first/**,config/msa/**,config/levantine/**,config/pilot/**,config/dari/**,scoring/models.dli-levantine/**,scoring/models.wsj01-16/**,,scoring/models.dli-dari/**">
        </jar>
    </target>

    <target depends="war" name="deploy">
        <copy todir="${tomcat.deploy}">
            <fileset dir="." includes="netPron2.war"/>
        </copy>
    </target>

    <target depends="warLevantine" name="deployLevantine">
        <copy todir="${tomcat.deploy}">
            <fileset dir="." includes="netPron2.war"/>
        </copy>

    </target>

    <target depends="build-subprojects,javac" name="light-war">
        <jar destfile="netPron2.war" basedir="war" excludes="answers/**,audioimages/**,scoring/tmp/**" >
        </jar>
    </target>
    
    <target name="build-subprojects" depends="cleanall">
        <ant antfile="build.xml" dir="${imagewriter.location}" inheritAll="false" target="build-project">
            <propertyset>
                <propertyref name="build.compiler"/>
            </propertyset>
        </ant>
        <copy todir="war/WEB-INF/lib">
            <fileset dir="${imagewriter.location}" includes="imagewriter.jar"/>
        </copy>
    </target>

    <target name="gwtc" depends="javac" description="GWT compile to JavaScript (production mode)">
        <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
            <classpath>
                <pathelement location="src"/>
                <path refid="LangTest.classpath"/>
    <!--            <pathelement location="${gwt.lib}/validation-api-1.0.0.GA.jar" />
                <pathelement location="${gwt.lib}/validation-api-1.0.0.GA-sources.jar" />-->
            </classpath>
            <!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
            <jvmarg value="-Xmx256M"/>
            <arg line="-war"/>
            <arg value="war"/>
            <arg line="-style"/>
            <arg value="PRETTY"/>
  <!--          <arg line="-logLevel"/>
            <arg value="DEBUG"/>-->
            <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
            <arg line="${gwt.args}"/>
            <arg value="mitll.langtest.LangTest"/>
        </java>
    </target>

    <target depends="init" name="javac">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="war/WEB-INF/classes" includeantruntime="false" source="${source}" target="${target}">
            <src path="src"/>
            <classpath refid="LangTest.classpath"/>
        </javac>
<!--
        <javac debug="true" debuglevel="${debuglevel}" destdir="test-classes" includeantruntime="false" source="${source}" target="${target}">
            <src path="test"/>
            <classpath refid="LangTest.classpath"/>
        </javac>
-->
        <copy todir="war/WEB-INF/lib">
            <fileset dir="${imagewriter.location}" includes="imagewriter.jar"/>
        </copy>
        <copy todir="war/WEB-INF/lib">
            <fileset dir="${imagewriter.location}/audioimage/lib" includes="jtransforms-2.3.jar"/>
        </copy>

    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
        <copy todir="${ant.library.dir}">
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </copy>
        <unzip dest="${ant.library.dir}">
            <patternset includes="jdtCompilerAdapter.jar"/>
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </unzip>
    </target>
    <target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        <antcall target="build"/>
    </target>
</project>
