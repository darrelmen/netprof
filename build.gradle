// Build-time dependencies
buildscript {
    repositories {
        jcenter()
        // Alternatively use:
//        maven {
//            url 'http://dl.bintray.com/steffenschaefer/maven'
//        }
    }
    dependencies {
        //Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
//        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:${jfrogVersion}"
        classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.7"
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}

plugins {
    id "com.jfrog.artifactory" version "4.4.7" // required for common.gradle
    id "com.github.hierynomus.license" version "0.13.1"
    id "net.saliman.cobertura" version "2.3.2" // required for common.gradle
    id "org.sonarqube" version "2.2"
    id "com.sourcemuse.mongo" version "0.13.0"
}

apply plugin: 'idea'
apply plugin: 'mongo'
apply from: 'gradle-common/common.gradle'
apply from: 'gradle-common/common-java.gradle'
apply plugin: 'gwt'
apply plugin: 'war'
apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'distribution'

mongo {
    port mongoPort
    mongoVersion mongoV
}

test {
    runWithMongoDb = true
}

license {
    skipExistingHeaders true
    ignoreFailures true
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

description = 'NetProF pronunciation feedback'

evaluationDependsOn(':imagewriter')

dependencies {
    compile('mitll.hlt:domino-core:1.1.0-SNAPSHOT') { changing = true }
    compile('mitll.hlt:domino-shared:1.2.0-SNAPSHOT') { changing = true }

    compile 'com.google.gwt:gwt-user:2.8.0'
    compile 'com.google.gwt:gwt-servlet:2.8.0'

    compile 'org.mongodb:mongo-java-driver:3.3.0'

    compile 'org.apache.commons:commons-email:latest.integration'
    compile 'org.apache.commons:commons-lang3:latest.integration'
    compile 'commons-codec:commons-codec:latest.integration'
    compile 'commons-io:commons-io:latest.integration'

    compile 'org.apache.logging.log4j:log4j-api:latest.integration'
    compile 'org.apache.logging.log4j:log4j-core:latest.integration'
    compile 'org.apache.logging.log4j:log4j-jcl:latest.integration'
    compile 'org.apache.logging.log4j:log4j-web:latest.integration'

    compile 'org.apache.ignite:ignite-core:1.5.0.final'

//    testCompile 'junit:junit:latest.integration'
    testCompile group: 'junit', name: 'junit', version: '4.12'

    testCompile 'org.hamcrest:hamcrest-all:latest.integration'
    testRuntime 'org.slf4j:slf4j-api:1.7.10'

    compile project(':npdata')
    compile project(':imagewriter')

    // compile 'org.apache.poi:poi:3.15'
    compile 'net.sf.uadetector:uadetector-core:0.9.22'
    compile 'net.sf.uadetector:uadetector-resources:2013.04'

    compile group: 'net.sf.json-lib', name: 'json-lib', version: '2.4', classifier: 'jdk15'

    compile 'com.github.gwtbootstrap:gwt-bootstrap:latest.integration'

    compile 'org.moxieapps.gwt:highcharts:1.7.0'

    // compile group: 'com.google.gwt.google-apis', name: 'gwt-visualization', version: '1.0.2'
    // todo consider removing this
//    compile name: 'gwt-visualization'

    // just for AMAS support
    compile name: 'mira'

    // TODO : get these as artifactory dependencies

    compile name: 'pronz_2.11-1.0'
    compile name: 'hydec_2.11-1.0'
    compile name: 'utils_2.11-1.0.0-SNAPSHOT'

    compile group: 'net.sf.json-lib', name: 'json-lib', version: '2.4', classifier: 'jdk15'

    compile group: 'org.apache.poi', name: 'poi', version: '3.15'
    compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.15'
    compile group: 'org.apache.poi', name: 'ooxml-schemas', version: '1.3'

    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.0'
    compile group: 'com.google.guava', name: 'guava', version: '20.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'

    compile group: 'org.apache.shiro', name: 'shiro-core', version: '1.3.2'
    compile group: 'org.apache.shiro', name: 'shiro-web', version: '1.3.2'
}

sourceSets {
    main {
        resources {
            srcDirs = ['src/main/resources']
        }
    }

    test {
        java {
            srcDirs = ['test']
        }
        resources {
            srcDirs = ['test/resources']
        }
    }
}

gwt {
    gwtVersion = '2.8.0'
    modules 'mitll.langtest.LangTest'

    logLevel = 'ERROR'

    minHeapSize = "512M";
    maxHeapSize = "4G";

    superDev {
        noPrecompile = true
    }
    // The following is only needed if you don't use the Google Plugin for Eclipse.
    eclipse {
        addGwtContainer = false // Default set to true
    }
}

war {
    archiveName "netprof.war"
    // somehow the domino tests jars are getting in if I don't do this
    rootSpec.exclude("**/*tests.jar")
    rootSpec.exclude("**/log4j2-test.xml")

    // needed???
    from('war/scoring/bin.linux64') {
        into 'scoring/bin.linux64'
    }
    from('war/scoring/configurations') {
        into 'scoring/configurations'
    }
    from 'war/amas.css'
    from 'war/LangTest.css'
    from 'war/LangTest.html'

    from 'war/docs/NetProf_Manual.pdf'

    webXml = file('war/WEB-INF/web.xml')

    from('src') {
        include '**/log4j2.xml'
        into 'WEB-INF/classes'
    }
}

// make standalone jar - for some reason it's huge
shadowJar {
    zip64 true
}

task makeDevInstallation(type: Zip) {
   // appendix = "installation"
    baseName = "netprof-installation"

    from('war/config/netProfDev') {
        into 'config'
    }
    from('scripts/copy.sh') {
        into 'bin'
    }
    from('docs/*') {
        into 'docs'
    }
    from('scripts/drop.sh') {
        into 'bin'
    }

    from('build/libs') {
        include '**/*.jar'
        exclude '**/*installation*.jar'
        into 'lib'
    }

    from('build/libs') {
        include '**/*.war'
        exclude '**/*installation*.jar'
        into 'dist'
    }
}

task makeDLIInstallation(type: Zip) {
    //  destinationDir = 'build/libs'
   // appendix = "installation"
    baseName = "netprof-installation"

    from('war/config/netProfDLI') {
        into 'config'
    }
    from('scripts/copy.sh') {
        into 'bin'
    }
    from('docs/*') {
        into 'docs'
    }
    from('scripts/drop.sh') {
        into 'bin'
    }

    from('build/libs') {
        include '**/*.jar'
        exclude '**/*installation*.jar'
        into 'lib'
    }

    from('build/libs') {
        include '**/*.war'
        exclude '**/*installation*.jar'
        into 'dist'
    }
}

distributions {
    main {
        baseName = 'netprof-installation'
        contents {
            from('war/config/netProfDLI') {
                into 'config'
            }
            from('scripts/copy.sh') {
                into 'bin'
            }
            from('docs/*') {
                into 'docs'
            }
            from('scripts/drop.sh') {
                into 'bin'
            }

            from('build/libs') {
                include '**/*.jar'
                exclude '**/*installation*.jar'
                into 'lib'
            }

            from('build/libs') {
                include '**/*.war'
                exclude '**/*installation*.jar'
                into 'dist'
            }
        }
    }
}

shadowJar.dependsOn war
//makeDevInstallation.dependsOn shadowJar
//makeDLIInstallation.dependsOn shadowJar

// ***************************** Publishing **************************************

publishing {
    publications {
        ivyJava(IvyPublication) {
            artifact(war)
          //  artifact(zip)
        }
        mavenJava(MavenPublication) {
            artifact(war)
//            artifact(zip)

        }
        distribution(IvyPublication) {

        }
    }
}
