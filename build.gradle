// Build-time dependencies

// ********************************* Plugins **************************************
buildscript {
    repositories {
        maven {
            url "${artifactory_contextUrl}/libs-release"
        }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}

plugins {
    id "com.jfrog.artifactory" version "4.4.7" // required for common.gradle
    id "com.github.hierynomus.license" version "0.13.1"
    id "org.sonarqube" version "2.5"
    // this one dies with jna thing!
//    id "com.sourcemuse.mongo" version "0.13.0"
    id "fr.putnami.gwt" version "0.6.1"
}

apply from: 'gradle-common/common.gradle'
apply from: 'gradle-common/common-java.gradle'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'distribution'
apply plugin: "jacoco"

putnami {
    module 'mitll.langtest.LangTest'
    gwtVersion = '2.8.2'
    /** add gwt nature on eclipse project */
    googlePluginEclipse = true

    compile {
        localWorkers = 8
        localWorkersMem = 4096
    }
}

license {
    skipExistingHeaders true
    ignoreFailures true
}

repositories {
    flatDir {
        dirs 'libs'
    }

    maven { url "http://central.maven.org/maven2/" }

    maven { url "${artifactory_contextUrl}/ext-snapshot-local" }

    ivy {
        url "${artifactory_contextUrl}/domino"
        credentials {
            username = "${artifactory_user}"
            password = "${artifactory_password}"
        }
        layout('ivy')
    }

    ivy {
        url "${artifactory_contextUrl}/ivy-libs-snapshot-dli"
        credentials {
            username = "${artifactory_user}"
            password = "${artifactory_password}"
        }
        layout('ivy')
    }
}

description = 'NetProF pronunciation feedback'

dependencies {
    // our modules
    def dominoVers = '2.7.10'

    compile name: "jtds-1.3.1"
    compile name: "Selection-1_1"

    // compile(group: 'net.jthink', name: 'jaudiotagger', version: '2.2.6-20170905.193146-1')
//    compile('mitll.hlt:domino-core:' + dcVers) { changing = true; }
    //compile('mitll.hlt:domino:' + dominoVers) { changing = true; }

    compile('mitll.hlt:domino:' + dominoVers) {
        changing = true
        transitive = true
        artifact { name = 'domino'; type = 'jar'; extension = 'jar' }

        exclude group: 'org.moxieapps.gwt', module: 'highcharts'
    }

    compile('mitll.hlt:npdata:1.0.0') { changing = true }

    compile group: 'com.github.rwl', name: 'jtransforms', version: 'latest.release'

    compile group: 'javax.json', name: 'javax.json-api', version: '1.0'
    compile group: 'org.glassfish', name: 'javax.json', version: '1.0.4'

    // gwt stuff
    def gwtVers = '2.8.2'
    providedCompile('com.google.gwt:gwt-dev:' + gwtVers) { transitive = false; }
    providedCompile('com.google.gwt:gwt-user:' + gwtVers) { transitive = false; }
    runtime('com.google.gwt:gwt-servlet:' + gwtVers)
    testRuntime('com.google.gwt:gwt-codeserver:' + gwtVers)

    compile group: 'javax.servlet', name: 'javax.servlet-api', version: 'latest.release'

    //   runtime group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'

    // please just include this jar oh gradle gods
    //   providedRuntime group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'

    //  testCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
    //  testRuntime group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'

    compile group: 'org.apache.commons', name: 'commons-math3', version: 'latest.release'

    def log4jVers = '2.8.2'

    compile('org.apache.logging.log4j:log4j-api:' + log4jVers)
    runtime('org.apache.logging.log4j:log4j-api:' + log4jVers)
    runtime('org.apache.logging.log4j:log4j-core:' + log4jVers)
//    runtime('org.apache.logging.log4j:log4j-jcl:' + log4jVers)
//    runtime('org.apache.logging.log4j:log4j-slf4j-impl:' + log4jVers)
//    runtime('org.apache.logging.log4j:log4j-web:' + log4jVers)

    compile('commons-io:commons-io:latest.integration')
//    compile('commons-beanutils:commons-beanutils:1+') { transitive = false; }
    compile('org.apache.commons:commons-lang3:3+')

    // RHB 2014.0723: Replacing normal commons logging with the log4j jcl bridge. This relies on the commons-logging-api
    // and solves several issues related to integration of commons and log4j2. FOP requires commons, but all commons
    // resources are skipped with an exceude below.
    //     <dependency org="commons-logging" name="commons-logging" rev="1.1.3" transitive="false" conf="runtime->default"/>
    runtime('commons-logging:commons-logging-api:1+')
    //runtime('commons-codec:commons-codec:1+') //{ transitive = false; }

    compile('org.apache.commons:commons-collections4:4+')

    // OK so the war plugin totally sucks - I include this explicitly and it bounces it out of the jar
    compile group: 'commons-collections', name: 'commons-collections', version: '3+'
    runtime group: 'commons-collections', name: 'commons-collections', version: '3+'

    compile('org.apache.commons:commons-email:1+')
    compile('commons-fileupload:commons-fileupload:1+')

    def poiVers = '3.17'
    compile('org.apache.poi:poi:' + poiVers)
    compile('org.apache.poi:poi-ooxml:' + poiVers)
    compile('org.apache.poi:ooxml-schemas:1.3')

    compile('org.apache.xmlbeans:xmlbeans:2.6.0')

    compile 'net.sf.uadetector:uadetector-core:0.9.22'
    compile 'net.sf.uadetector:uadetector-resources:2014.10'

    // TODO : use gson instead
    compile group: 'net.sf.json-lib', name: 'json-lib', version: '2.4', classifier: 'jdk15'

    compile 'com.github.gwtbootstrap:gwt-bootstrap:latest.release'

    // just for AMAS support
    compile name: 'mira'

    compile name: "org.moxieapps.gwt.highcharts-1.7.0"

    // the only way I can get war to accept my explicit command to include these jars
    //compile name: 'commons-codec-1.10'
    // compile name: 'commons-collections-3.2.2'
    //  compile group: 'commons-collections', name: 'commons-collections', version: 'latest.integration'

    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'

    compile group: 'commons-codec', name: 'commons-codec', version: '1+'
    runtime group: 'commons-codec', name: 'commons-codec', version: '1+'

    compile group: 'org.apache.lucene', name: 'lucene-analyzers', version: 'latest.release'

    compile group: 'commons-cli', name: 'commons-cli', version: 'latest.release'

    compile 'com.h2database:h2:1.3.176'

    testCompile group: 'junit', name: 'junit', version: 'latest.release'

    // compile group: 'javax.websocket', name: 'javax.websocket-api', version: '1.1'
    //   compile group: 'net.bull.javamelody', name: 'javamelody-core', version: '1.72.0'
}

configurations.all {
    resolutionStrategy {
        force 'com.h2database:h2:1.3.176'
    }
}

war {
    archiveName "netprof.war"
    // somehow the domino tests jars are getting in if I don't do this

    rootSpec.exclude("**/*-source.jar")
    rootSpec.exclude("**/*-tests.jar")
    rootSpec.exclude("**/*tests.jar")
    rootSpec.exclude("**/log4j2-test.xml")

    rootSpec.exclude "WEB-INF/web.xml"
    rootSpec.exclude "WEB-INF/production-web.xml"

    webXml = file('src/main/webapp/WEB-INF/production-web.xml')

    // so this is coming from somewhere in domino - it includes a faulty mpeg format that chooses to insert itself when we go to read .wav files!
    rootSpec.exclude("**/mp3spi*.jar")

    // try to make ours mask out others...
    from('src') {
        include '**/log4j2.xml'
        into 'WEB-INF/classes'
    }
}

// make standalone jar
shadowJar {
    zip64 true
}

task showMeCache << {
    configurations.compile.each { println it }
}

distributions {
    main {
        baseName = 'netprof-installation'
        contents {
            from('war/config/netProfDev') {
                into 'config'
            }
            from('config') {
                into 'serverConfig'
            }
            from('war/config/netProfDLI') {
                into 'configProduction'
            }
            from('scripts') {
                include '**/*.sh'
                into 'bin'
            }
            from('docs/*') {
                into 'docs'
            }

            from('build/libs') {
                include '**/*.jar'
                exclude '**/*installation*.jar'
                into 'lib'
            }

            from('build/libs') {
                include '**/*.war'
                exclude '**/*installation*.jar'
                into 'dist'
            }
        }
    }
}

shadowJar.dependsOn war

// ***************************** Publishing **************************************

publishing {
    publications {
        ivyJava(IvyPublication) {
            artifact(war)
            artifact distZip
        }
        mavenJava(MavenPublication) {
            artifact(war)
            artifact distZip

        }
        distribution(IvyPublication) {
            artifact distZip
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/jacoco/html"
    }
}

check.dependsOn jacocoTestReport

//jacoco {
//    applyTo run
//}
//
//task applicationCodeCoverageReport(type:JacocoReport){
//    executionData run
//    sourceSets sourceSets.main
//}
//
//test {
//    jacoco {
//        append = false
//        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
//        classDumpDir = file("$buildDir/jacoco/classpathdumps")
//    }
//}

// add eclipse preferences.
tasks.eclipse.doLast {
    def ewf = new File("${project.projectDir}/build/eclipse-war");
    ewf.mkdirs();

    // write settings file 'com.google.gdt.eclipse.core.prefs'
    ant.propertyfile(file: ".settings/com.google.gdt.eclipse.core.prefs") {
        ant.entry(key: "eclipse.preferences.version", value: "1")
        ant.entry(key: "jarsExcludedFromWebInfLib", value: "")
        ant.entry(key: "lastWarOutDir", value: ewf.getAbsoluteFile())
        ant.entry(key: "warSrcDir", value: "src/main/webapp")
        ant.entry(key: "warSrcDirIsOutput", value: "false")
    }

    ant.propertyfile(file: ".settings/org.eclipse.wst.validation.prefs") {
        ant.entry(key: "DELEGATES_PREFERENCE", value: "delegateValidatorList")

        ant.entry(key: "USER_BUILD_PREFERENCE", value: "enabledBuildValidatorListorg.eclipse.jst.j2ee.internal.web.validation.UIWarValidator;org.eclipse.jst.j2ee.internal.classpathdep.ClasspathDependencyValidator;")
        ant.entry(key: "USER_MANUAL_PREFERENCE", value: "enabledManualValidatorListorg.eclipse.jst.j2ee.internal.web.validation.UIWarValidator;org.eclipse.jst.j2ee.internal.classpathdep.ClasspathDependencyValidator;")
        ant.entry(key: "USER_PREFERENCE", value: "overrideGlobalPreferencestruedisableAllValidationfalseversion1.2.700.v201508251749")
        ant.entry(key: "eclipse.preferences.version", value: "1")
        ant.entry(key: "override", value: "true")
        ant.entry(key: "suspend", value: "false")
        ant.entry(key: "vals/org.eclipse.wst.html.core.HTMLValidator/groups", value: "0107include06111contentType136org.eclipse.wst.html.core.htmlsourceT07fileext04htmlF07fileext05xhtmlF07fileext03htmF07fileext04htplF07fileext03wmlF0107exclude0404file131src/test/resources/import/GLOSSF0204file05buildF0204file139html-cleaner-word-pasted-no-suffix.htmlF0104file129html-cleaner-word-pasted.htmlF01")
        ant.entry(key: "vals/org.eclipse.wst.json.core.json/groups", value: "0107include02111contentType136org.eclipse.wst.json.core.jsonsourceT07fileext04jsonF0107exclude0404file110empty.jsonF0104file114invalid-1.jsonF0104file114invalid-2.jsonF0104file05buildF02")
        ant.entry(key: "vals/org.eclipse.wst.xml.core.xml/groups", value: "0107include05111contentType128org.eclipse.core.runtime.xmlT111contentType134org.eclipse.wst.xml.core.xmlsourceT111contentType134org.eclipse.wst.xml.core.xslsourceT111contentType134org.eclipse.jst.jsp.core.tldsourceT07fileext03xmlF0107exclude08113projectNature134org.eclipse.jst.j2ee.ejb.EJBNature113projectNature130org.eclipse.jst.j2ee.EARNature04file08.projectT0104file110.classpathT0104file110.settings/T0204file05buildF0204file112test-workingF0204file131src/test/resources/import/GLOSSF02")
        ant.entry(key: "vf.version", value: "3")
    }
}