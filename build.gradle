// Build-time dependencies

// ********************************* Plugins **************************************
buildscript {
    repositories {
        maven {
            url "${artifactory_contextUrl}/libs-release"
        }
    }
    dependencies {
        //       classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}

plugins {
    id "com.jfrog.artifactory" version "4.4.7" // required for common.gradle
    id "com.github.hierynomus.license" version "0.13.1"
    id "net.saliman.cobertura" version "2.3.2" // required for common.gradle
    id "org.sonarqube" version "2.2"
    // this one dies with jna thing!
//    id "com.sourcemuse.mongo" version "0.13.0"

    id "fr.putnami.gwt" version "0.4.0"
}

//apply plugin: 'idea'
//apply plugin: 'mongo'
apply from: 'gradle-common/common.gradle'
apply from: 'gradle-common/common-java.gradle'
//apply plugin: 'gwt'
//apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'distribution'

putnami {
    module 'mitll.langtest.LangTest'
    gwtVersion = '2.8.0'
    /** add gwt nature on eclipse project */
    googlePluginEclipse = true

    compile {
        localWorkers = 8
        localWorkersMem = 4096
    }
}

/*
mongo {
    port mongoPort
    mongoVersion mongoV
}

test {
    runWithMongoDb = true
}
*/

license {
    skipExistingHeaders true
    ignoreFailures true
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

description = 'NetProF pronunciation feedback'

dependencies {
    // our modules
    compile('mitll.hlt:domino-core:1.1.0-SNAPSHOT') { changing = true;   }
    //compile('mitll.hlt:domino-shared:1.2.0-SNAPSHOT') { changing = true }
    compile('mitll.hlt:imagewriter:1.0.0') { changing = true }
    compile('mitll.hlt:npdata:1.0.0') { changing = true }

    // gwt stuff
    providedCompile('com.google.gwt:gwt-dev:2.8.0')
    providedCompile('com.google.gwt:gwt-user:2.8.0')
    runtime('com.google.gwt:gwt-servlet:2.8.0')
    testRuntime('com.google.gwt:gwt-codeserver:2.8.0')

//    compile 'org.mongodb:mongo-java-driver:3.3.0'
//    compile 'org.apache.commons:commons-lang3:latest.integration'
    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.0'

    def log4jVers = '2+'
    compile('org.apache.logging.log4j:log4j-api:' + log4jVers) 
    runtime('org.apache.logging.log4j:log4j-core:' + log4jVers)
    runtime('org.apache.logging.log4j:log4j-jcl:' + log4jVers)
    runtime('org.apache.logging.log4j:log4j-slf4j-impl:' + log4jVers) 
    runtime('org.apache.logging.log4j:log4j-web:' + log4jVers)

    compile('commons-io:commons-io:2.5')
//    compile('commons-beanutils:commons-beanutils:1+') { transitive = false; }
    compile('org.apache.commons:commons-lang3:3+')

    // RHB 2014.0723: Replacing normal commons logging with the log4j jcl bridge. This relies on the commons-logging-api
    // and solves several issues related to integration of commons and log4j2. FOP requires commons, but all commons
    // resources are skipped with an exceude below.
    //     <dependency org="commons-logging" name="commons-logging" rev="1.1.3" transitive="false" conf="runtime->default"/>
    runtime('commons-logging:commons-logging-api:1+')
    //runtime('commons-codec:commons-codec:1+') //{ transitive = false; }


    compile('org.apache.commons:commons-collections4:4+')
    compile('org.apache.commons:commons-email:1+')
    compile('org.apache.ignite:ignite-core:1.7.0')
    runtime('org.apache.ignite:ignite-slf4j:1.7.0')
    compile('commons-fileupload:commons-fileupload:1+')

    def poiVers = '3.15'
    compile('org.apache.poi:poi:' + poiVers)
    compile('org.apache.poi:poi-ooxml:' + poiVers)
    compile('org.apache.poi:ooxml-schemas:1.3')
    // runtime('org.apache.poi:ooxml-schemas:1.3') { transitive = false; }
//    compile('org.apache.poi:poi-scratchpad:' + poiVers) { transitive = false; }
    compile('org.apache.xmlbeans:xmlbeans:2.6.0')

    testCompile group: 'junit', name: 'junit', version: '4.12'

//    testCompile 'org.hamcrest:hamcrest-all:latest.integration'
//    testRuntime 'org.slf4j:slf4j-api:1.7.10'

    compile 'net.sf.uadetector:uadetector-core:0.9.22'

    compile 'net.sf.uadetector:uadetector-resources:2013.04'

    compile group: 'net.sf.json-lib', name: 'json-lib', version: '2.4', classifier: 'jdk15'

    compile 'com.github.gwtbootstrap:gwt-bootstrap:latest.integration'

    compile 'org.moxieapps.gwt:highcharts:1.7.0'

    // just for AMAS support
    compile name: 'mira'

    // TODO : get these as artifactory dependencies

    compile name: 'pronz_2.11-1.0'
    compile name: 'hydec_2.11-1.0'
    compile name: 'utils_2.11-1.0.0-SNAPSHOT'
    compile name: 'commons-codec-1.10'

    // TODO : use gson instead
    compile group: 'net.sf.json-lib', name: 'json-lib', version: '2.4', classifier: 'jdk15'

    compile group: 'com.google.guava', name: 'guava', version: '21.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'

    compile group: 'commons-codec', name: 'commons-codec', version: '1.10'
    runtime group: 'commons-codec', name: 'commons-codec', version: '1.10'

//    compile group: 'org.apache.shiro', name: 'shiro-core', version: '1.3.2'
//    compile group: 'org.apache.shiro', name: 'shiro-web', version: '1.3.2'
}

sourceSets {
    main {
        resources {
            srcDirs = ['src/main/resources']
        }
    }

    test {
        java {
            srcDirs = ['test']
        }
        resources {
            srcDirs = ['test/resources']
        }
    }
}

/*
gwt {
    gwtVersion = '2.8.0'
    modules 'mitll.langtest.LangTest'

    logLevel = 'INFO'

    minHeapSize = "512M";
    maxHeapSize = "4G";

    compiler {
//         Script output style. (OBF, PRETTY, DETAILED)
        style = "OBF"
        //       Sets the optimization level used by the compiler. 0=none 9=maximum.
        // optimize = 5
        //     Fail compilation if any input file contains an error.
        //failOnError = true
        //   Specifies Java source level. ("1.6", "1.7")
        sourceLevel = "1.8"
        // The number of local workers to use when compiling permutations.
        localWorkers = 5

//         The level of logging detail (ERROR, WARN, INFO, TRACE, DEBUG, SPAM, ALL)
        logLevel = "INFO"

        // shown all compile errors
        strict = true
    }

    superDev {
        noPrecompile = true
    }
    // The following is only needed if you don't use the Google Plugin for Eclipse.
    eclipse {
        addGwtContainer = false // Default set to true
    }
}
*/

war {
    archiveName "netprof.war"
    // somehow the domino tests jars are getting in if I don't do this
  //  rootSpec.exclude("**/*tests.jar")
    rootSpec.exclude("**/log4j2-test.xml")

    // needed???
/*
    from('war/scoring/bin.linux64') {
        into 'scoring/bin.linux64'
    }
    from('war/scoring/configurations') {
        into 'scoring/configurations'
    }
    from 'war/amas.css'
    from 'war/LangTest.css'
    from 'war/LangTest.html'

    from 'war/docs/NetProf_Manual.pdf'

    webXml = file('war/WEB-INF/web.xml')
    */

    from('src') {
        include '**/log4j2.xml'
        into 'WEB-INF/classes'
    }
}

// make standalone jar
shadowJar {
    zip64 true
}

distributions {
    main {
        baseName = 'netprof-installation'
        contents {
            from('war/config/netProfDev') {
                into 'config'
            }
            from('war/config/netProfDLI') {
                into 'configProduction'
            }
            from('scripts/copy.sh') {
                into 'bin'
            }
            from('docs/*') {
                into 'docs'
            }
            from('scripts/drop.sh') {
                into 'bin'
            }

            from('build/libs') {
                include '**/*.jar'
                exclude '**/*installation*.jar'
                into 'lib'
            }

            from('build/libs') {
                include '**/*.war'
                exclude '**/*installation*.jar'
                into 'dist'
            }
        }
    }
}

shadowJar.dependsOn war

// ***************************** Publishing **************************************

publishing {
    publications {
        ivyJava(IvyPublication) {
            artifact(war)
            artifact distZip
        }
        mavenJava(MavenPublication) {
            artifact(war)
            artifact distZip

        }
        distribution(IvyPublication) {
            artifact distZip
        }
    }
}

// add eclipse preferences.
tasks.eclipse.doLast {
    def ewf = new File("${project.projectDir}/build/eclipse-war");
    ewf.mkdirs();

    // write settings file 'com.google.gdt.eclipse.core.prefs'
    ant.propertyfile(file: ".settings/com.google.gdt.eclipse.core.prefs") {
        ant.entry(key: "eclipse.preferences.version", value: "1")
        ant.entry(key: "jarsExcludedFromWebInfLib", value: "")
        ant.entry(key: "lastWarOutDir", value: ewf.getAbsoluteFile())
        ant.entry(key: "warSrcDir", value: "src/main/webapp")
        ant.entry(key: "warSrcDirIsOutput", value: "false")
    }

    ant.propertyfile(file: ".settings/org.eclipse.wst.validation.prefs") {
        ant.entry(key: "DELEGATES_PREFERENCE", value: "delegateValidatorList")

        ant.entry(key: "USER_BUILD_PREFERENCE", value: "enabledBuildValidatorListorg.eclipse.jst.j2ee.internal.web.validation.UIWarValidator;org.eclipse.jst.j2ee.internal.classpathdep.ClasspathDependencyValidator;")
        ant.entry(key: "USER_MANUAL_PREFERENCE", value: "enabledManualValidatorListorg.eclipse.jst.j2ee.internal.web.validation.UIWarValidator;org.eclipse.jst.j2ee.internal.classpathdep.ClasspathDependencyValidator;")
        ant.entry(key: "USER_PREFERENCE", value: "overrideGlobalPreferencestruedisableAllValidationfalseversion1.2.700.v201508251749")
        ant.entry(key: "eclipse.preferences.version", value: "1")
        ant.entry(key: "override", value: "true")
        ant.entry(key: "suspend", value: "false")
        ant.entry(key: "vals/org.eclipse.wst.html.core.HTMLValidator/groups", value: "0107include06111contentType136org.eclipse.wst.html.core.htmlsourceT07fileext04htmlF07fileext05xhtmlF07fileext03htmF07fileext04htplF07fileext03wmlF0107exclude0404file131src/test/resources/import/GLOSSF0204file05buildF0204file139html-cleaner-word-pasted-no-suffix.htmlF0104file129html-cleaner-word-pasted.htmlF01")
        ant.entry(key: "vals/org.eclipse.wst.json.core.json/groups", value: "0107include02111contentType136org.eclipse.wst.json.core.jsonsourceT07fileext04jsonF0107exclude0404file110empty.jsonF0104file114invalid-1.jsonF0104file114invalid-2.jsonF0104file05buildF02")
        ant.entry(key: "vals/org.eclipse.wst.xml.core.xml/groups", value: "0107include05111contentType128org.eclipse.core.runtime.xmlT111contentType134org.eclipse.wst.xml.core.xmlsourceT111contentType134org.eclipse.wst.xml.core.xslsourceT111contentType134org.eclipse.jst.jsp.core.tldsourceT07fileext03xmlF0107exclude08113projectNature134org.eclipse.jst.j2ee.ejb.EJBNature113projectNature130org.eclipse.jst.j2ee.EARNature04file08.projectT0104file110.classpathT0104file110.settings/T0204file05buildF0204file112test-workingF0204file131src/test/resources/import/GLOSSF02")
        ant.entry(key: "vf.version", value: "3")
    }
}