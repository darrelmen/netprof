/* * DISTRIBUTION STATEMENT C. Distribution authorized to U.S. Government Agencies * and their contractors; 2019. Other request for this document shall be referred * to DLIFLC. * * WARNING: This document may contain technical data whose export is restricted * by the Arms Export Control Act (AECA) or the Export Administration Act (EAA). * Transfer of this data by any means to a non-US person who is not eligible to * obtain export-controlled data is prohibited. By accepting this data, the consignee * agrees to honor the requirements of the AECA and EAA. DESTRUCTION NOTICE: For * unclassified, limited distribution documents, destroy by any method that will * prevent disclosure of the contents or reconstruction of the document. * * This material is based upon work supported under Air Force Contract No. * FA8721-05-C-0002 and/or FA8702-15-D-0001. Any opinions, findings, conclusions * or recommendations expressed in this material are those of the author(s) and * do not necessarily reflect the views of the U.S. Air Force. * * Â© 2015-2019 Massachusetts Institute of Technology. * * The software/firmware is provided to you on an As-Is basis * * Delivered to the US Government with Unlimited Rights, as defined in DFARS * Part 252.227-7013 or 7014 (Feb 2014). Notwithstanding any copyright notice, * U.S. Government rights in this work are defined by DFARS 252.227-7013 or * DFARS 252.227-7014 as detailed above. Use of this work other than as specifically * authorized by the U.S. Government may violate any copyrights that exist in this work. */package mitll.langtest.server.database;import mitll.langtest.client.user.Md5Hash;import java.io.*;import java.net.HttpURLConnection;import java.net.URL;public class FileUploader {  static final String UPLOAD_URL = "http://127.0.0.1:8888/scoreServlet";  static final int BUFFER_SIZE = 4096;  public static void main(String[] args) throws IOException {    testPostAFile(false);    testPostAFile(true);  }  private static void testGet() throws IOException {    String gvidaver = "gvidaver";    String pass = "8479166e9d8fd7abf3e41a1bfebfb0b7";    testHasUser(gvidaver, pass);  }  private static void testHasUser(String gvidaver, String pass) throws IOException {    URL url = new URL(UPLOAD_URL + "?hasUser=" +        gvidaver+"&passH=" +        pass.toUpperCase()    );    HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();    httpConn.setRequestMethod("GET");    // always check HTTP response code from server    getResponse(httpConn);  }  private static void testSimplePost(String name) throws IOException {    URL url = new URL(UPLOAD_URL);    HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();    httpConn.setRequestMethod("POST");    httpConn.setRequestProperty("request", "addUser");    httpConn.setRequestProperty("user", name);    httpConn.setRequestProperty("device", "1234567890ABCDEFGHIJ");    httpConn.setRequestProperty("deviceType", "iPad");    httpConn.setRequestProperty("passwordH", Md5Hash.getHash("bueller"));    httpConn.setRequestProperty("emailH", Md5Hash.getHash("dave@dave.com"));    // always check HTTP response code from server    getResponse(httpConn);  }  private static void testPostAFile(boolean decode) throws IOException {    String filePath = "/Users/go22670/netPron2/war/config/msa/bestAudio/2549/Fast.wav";    File uploadFile = new File(filePath);    System.out.println("File to upload: " + filePath);    // creates a HTTP connection    HttpURLConnection httpConn = getPost();    // sets file name as a HTTP header    httpConn.setRequestProperty("fileName", uploadFile.getName());    httpConn.setRequestProperty("user", "1");    httpConn.setRequestProperty("deviceType", "iPad");    httpConn.setRequestProperty("device", "01234567890");    httpConn.setRequestProperty("exercise", ""+2549);    httpConn.setRequestProperty("request", decode ? "decode" :"align");    postFile(uploadFile, httpConn);    // always check HTTP response code from server    getResponse(httpConn);  }  private static void testPost() throws IOException {    String filePath = "/Users/go22670/netPron2/war/config/english/bestAudio/Fast.wav";    File uploadFile = new File(filePath);    System.out.println("File to upload: " + filePath);    // creates a HTTP connection    HttpURLConnection httpConn = getPost();    // sets file name as a HTTP header    httpConn.setRequestProperty("fileName", uploadFile.getName());    httpConn.setRequestProperty("word", "book");    httpConn.setRequestProperty("flashcard", "flashcard");    postFile(uploadFile, httpConn);    // always check HTTP response code from server    getResponse(httpConn);  }  private static HttpURLConnection getPost() throws IOException {    URL url = new URL(UPLOAD_URL);    HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();    httpConn.setUseCaches(false);    httpConn.setDoOutput(true);    httpConn.setRequestMethod("POST");    return httpConn;  }  /**   * @see #testPost()   * @param httpConn   * @throws IOException   */  private static void getResponse(HttpURLConnection httpConn) throws IOException {    int responseCode = httpConn.getResponseCode();    if (responseCode == HttpURLConnection.HTTP_OK) {      // reads server's response      BufferedReader reader = new BufferedReader(new InputStreamReader(        httpConn.getInputStream()));      String response = reader.readLine();      System.out.println("Server's response: " + response);    } else {      System.out.println("Server returned non-OK code: " + responseCode);    }  }  /**   * @see #testPost()   * @param uploadFile   * @param httpConn   * @throws IOException   */  private static void postFile(File uploadFile, HttpURLConnection httpConn) throws IOException {    // opens output stream of the HTTP connection for writing data    OutputStream outputStream = httpConn.getOutputStream();    // Opens input stream of the file for reading data    FileInputStream inputStream = new FileInputStream(uploadFile);    byte[] buffer = new byte[BUFFER_SIZE];    int bytesRead = -1;    System.out.println("Start writing data...");    while ((bytesRead = inputStream.read(buffer)) != -1) {      outputStream.write(buffer, 0, bytesRead);    }    System.out.println("Data was written.");    outputStream.close();    inputStream.close();  }}